import telebot
from telebot import types
from typing import Optional

token = '6933495351:AAEIm3hBl79gABYjaUaQvd0_o2WQ7pUEpeM'
bot = telebot.TeleBot(token)
temp_data = {}
all_tasks = {}
my_team = {}
task_id = None
member_id = None


def send_message_with_inline_keyboard(chat_id, text, buttons):
    markup = types.InlineKeyboardMarkup()
    for button in buttons:
        markup.add(types.InlineKeyboardButton(text=button['text'], callback_data=button['callback_data']))
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    text = f'–ü—Ä–∏–≤–µ—Ç!üëãüèº\n–Ø –ß–∞—Ç-–±–æ—Ç –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º. \n' \
           '–í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. \n' \
           '*–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.* '
    buttons = [{'text': '‚ñ∂Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è', 'callback_data': 'add_director'}]
    send_message_with_inline_keyboard(chat_id, text, buttons)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data

    if data == 'add_director':
        temp_data[chat_id] = {"director_id": None}
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ @username —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        bot.register_next_step_handler(call.message, set_director)

    if data == 'add_task':
        global task_id
        task_id = 'task_' + str(len(all_tasks) + 1)
        all_tasks[task_id] = {"name": None, 'description': None, 'deadline': None, 'responsible': None,
                              'priority': None}
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        bot.register_next_step_handler(call.message, set_name)
    if data == 'edit_task':
        if len(all_tasks) != 0:
            text = '*–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á*:\n'
            for i in range(len(all_tasks)):
                task_id = 'task_' + str(i + 1)
                text += f"_–ó–∞–¥–∞—á–∞ ‚Ññ {i + 1}_\n" \
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ:{all_tasks[task_id]['name']}\n" \
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {all_tasks[task_id]['description']}\n" \
                        f"–î–µ–¥–ª–∞–π–Ω: {all_tasks[task_id]['deadline']}\n" \
                        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {all_tasks[task_id]['priority']}\n"
            bot.send_message(chat_id, text=text, parse_mode='Markdown')
            markup = types.InlineKeyboardMarkup()
            buttons = [types.InlineKeyboardButton(str(i), callback_data=f'edit_task_{i}') for i in
                       range(1, len(all_tasks) + 1)]
            markup.add(*buttons)
            bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup)

    if data == 'all_tasks':
        show_all_tasks(chat_id, message_id)

    if data == 'return_menu':
        show_menu(chat_id)

    if data == 'return_all_tasks':
        show_all_tasks(chat_id, message_id)

    if data == 'completed_tasks':
        completed_tasks = [task_id for task_id, task_info in all_tasks.items() if task_info.get('completed', False)]
        if not completed_tasks:
            text = '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.'
        else:
            text = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n'
            for i, task_id in enumerate(completed_tasks, start=1):
                text += f"{i}. {all_tasks[task_id]['name']}\n"
        buttons = [{'text': '–ù–∞–∑–∞–¥', 'callback_data': 'return_all_tasks'}]
        edit_message_text(chat_id, message_id, text, reply_markup=generate_inline_keyboard(buttons))

    if data == 'uncompleted_tasks':
        uncompleted_tasks = [task_id for task_id, task_info in all_tasks.items() if
                             not task_info.get('completed', False)]
        if not uncompleted_tasks:
            text = '–ù–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.'
        else:
            text = '–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n'
            for i, task_id in enumerate(uncompleted_tasks, start=1):
                text += f"{i}. {all_tasks[task_id]['name']}\n"
        buttons = [{'text': '–ù–∞–∑–∞–¥', 'callback_data': 'return_all_tasks'}]
        edit_message_text(chat_id, message_id, text, reply_markup=generate_inline_keyboard(buttons))

    if data == 'change_status':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:'
        buttons = [
            {'text': f'{i + 1}. {task_info["name"]}', 'callback_data': f'change_status_{task_id}'}
            for i, (task_id, task_info) in enumerate(all_tasks.items())
        ]
        buttons.append({'text': '–ù–∞–∑–∞–¥', 'callback_data': 'return_all_tasks'})
        edit_message_text(chat_id, message_id, text, reply_markup=generate_inline_keyboard(buttons))

    if data.startswith('change_status_'):
        task_id_to_change = data.replace('change_status_', '')
        if task_id_to_change in all_tasks:
            task_info = all_tasks[task_id_to_change]
            current_status = task_info.get('completed', False)
            new_status = not current_status
            task_info['completed'] = new_status
            text = f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–í—ã–ø–æ–ª–Ω–µ–Ω–∞' if new_status else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}."
        else:
            text = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        buttons = [{'text': '–ù–∞–∑–∞–¥', 'callback_data': 'return_all_tasks'}]
        edit_message_text(chat_id, message_id, text, reply_markup=generate_inline_keyboard(buttons))

    if data == 'edit_name':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
        bot.register_next_step_handler(call.message, edit_name)

    if data == 'edit_description':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
        bot.register_next_step_handler(call.message, edit_description)

    if data == 'edit_deadline':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏')
        bot.register_next_step_handler(call.message, edit_deadline)

    if data == 'edit_priority':
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(str(i), callback_data=f'priority_{i}') for i in range(1, 6)]
        markup.add(*buttons)
        bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏', reply_markup=markup)
    if data == 'menu':
        show_menu(chat_id=chat_id)
    if data.startswith('priority'):
        all_tasks[task_id]['priority'] = int(data.split('_')[1])
        if len(my_team) == 0:
            buttons = [
                {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'add_member'}
            ]
        else:
            buttons = [
                {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'menu'}
            ]
        text = f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
               f"üî∏*–ù–∞–∑–≤–∞–Ω–∏–µ*: {all_tasks[task_id]['name']}\n" \
               f"üî∏*–û–ø–∏—Å–∞–Ω–∏–µ*: {all_tasks[task_id]['description']}\n" \
               f"üî∏*–î–µ–¥–ª–∞–π–Ω*: {all_tasks[task_id]['deadline']}\n" \
               f"üî∏*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*: {all_tasks[task_id]['priority']}\n"\
                "P.S. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"
        send_message_with_inline_keyboard(chat_id, text, buttons)
    if data.startswith('edit_task_'):
        task_id = 'task_' + data[-1]
        buttons = [
            {'text': '‚ö´Ô∏è–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', 'callback_data': 'edit_name'},
            {'text': 'üîµÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', 'callback_data': 'edit_description'},
            {'text': '‚ö´Ô∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', 'callback_data': 'edit_deadline'},
            {'text': 'üîµÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'callback_data': 'edit_priority'}
        ]
        send_message_with_inline_keyboard(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ', buttons)
    if data == 'add_member':
        additional_text = ''
        if len(my_team) == 0:
            additional_text = '–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É. '
        global member_id
        member_id = 'member_' + str(len(my_team) + 1)
        my_team[member_id] = {"username": None, 'firstname': None, 'lastname': None, 'role': None}
        #bot.send_message(chat_id, f"{additional_text}–ù–∞–ø–∏—à–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É.")#
        edit_message_text(chat_id, message_id, f"{additional_text}–ù–∞–ø–∏—à–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É.")
        bot.register_next_step_handler(call.message, set_username)
    if data.startswith('edit_member_'):
        member_id = 'member_' + data[-1]
        buttons = [
            {'text': '–ò–∑–º–µ–Ω–∏—Ç—å @username', 'callback_data': 'edit_username'},
            {'text': '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'callback_data': 'edit_firstname'},
            {'text': '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é', 'callback_data': 'edit_lastname'},
            {'text': '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å', 'callback_data': 'edit_role'}
        ]
        send_message_with_inline_keyboard(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                          buttons)
    if data == 'edit_username':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ @username')
        bot.register_next_step_handler(call.message, edit_username)
    if data == 'edit_firstname':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è')
        bot.register_next_step_handler(call.message, edit_firstname)
    if data == 'edit_lastname':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
        bot.register_next_step_handler(call.message, edit_lastname)
    if data == 'edit_role':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å')
        bot.register_next_step_handler(call.message, edit_role)
    if data.startswith('del_member_'):
        member_id_number = int(data[-1])
        for i in range(member_id_number, len(my_team)):
            my_team['member_' + str(i)] = my_team['member_' + str(i + 1)]
        del my_team['member_' + str(len(my_team))]
        buttons = [
            {'text': "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
        ]
        text = '–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã.'
        send_message_with_inline_keyboard(chat_id, text, buttons)
    if data == 'delete_member':
        if len(my_team) != 0:
            markup = types.InlineKeyboardMarkup()
            buttons = [
                types.InlineKeyboardButton(my_team['member_' + str(i)]['username'], callback_data=f'del_member_{i}') for
                i in
                range(1, len(my_team) + 1)]
            markup.add(*buttons)

            bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã.',
                             reply_markup=markup)

    if data.startswith('add_responsible_member_'):
        all_tasks[f'task_{data[23]}']['responsible'] = 'member_' + str(data[-1])
        buttons = [
            {'text': "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
        ]
        text = '–û—Ç–ª–∏—á–Ω–æ, —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –∑–∞–¥–∞—á–µ–π!'
        send_message_with_inline_keyboard(chat_id, text, buttons)

    if data.startswith('add_responsible_for_task_'):
        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(my_team['member_' + str(i)]['username'],
                                       callback_data=f'add_responsible_member_{i}_for_task_{str(data[-1])}') for
            i in
            range(1, len(my_team) + 1)]
        markup.add(*buttons)
        bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞ –∑–∞–¥–∞—á–µ–π.',
                         reply_markup=markup)
    if data == 'assign_roles':
        if len(all_tasks) != 0:
            text = '*–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á*:\n'
            for i in range(len(all_tasks)):
                task_id = 'task_' + str(i + 1)
                text += f"_–ó–∞–¥–∞—á–∞ ‚Ññ {i + 1}_\n" \
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ:{all_tasks[task_id]['name']}\n" \
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {all_tasks[task_id]['description']}\n" \
                        f"–î–µ–¥–ª–∞–π–Ω: {all_tasks[task_id]['deadline']}\n" \
                        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {all_tasks[task_id]['priority']}\n"
            bot.send_message(chat_id, text=text, parse_mode='Markdown')
            markup = types.InlineKeyboardMarkup()
            buttons = [types.InlineKeyboardButton(str(i), callback_data=f'assign_members_to_task_{i}') for i in
                       range(1, len(all_tasks) + 1)]
            markup.add(*buttons)
            bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
                             reply_markup=markup)
    if data.startswith('assign_members_to_task_'):
        all_tasks['task_'+data[-1]]['responsible'] = None
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(my_team['member_' + str(i)]['username'],
                                              callback_data=f'assign_member_{i}_for_task_{data[-1]}') for i in
                   range(1, len(my_team) + 1)]
        buttons += {types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ!',
                                               callback_data=f'ready_to_assign')}
        markup.add(*buttons)
        bot.send_message(chat_id, text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ @username –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –∑–∞–¥–∞—á–µ–π. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ!' ",
                         reply_markup=markup)
    if data.startswith('assign_member_'):
        task_id = 'task_'+data[-1]
        if all_tasks[task_id]['responsible'] is None:
            all_tasks[task_id]['responsible'] = [my_team['member_' + data[14]]['username']]
        else:
            all_tasks[task_id]['responsible'] += [my_team['member_' + data[14]]['username']]
    if data == 'ready_to_assign':
        text = f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞ –∑–∞–¥–∞—á–µ–π –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {all_tasks[task_id]['name']} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω(—ã) —É—á–∞—Å—Ç–Ω–∏–∫(–∏) —Å @username {all_tasks[task_id]['responsible']}"
        buttons = [
            {'text': "–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
        ]
        send_message_with_inline_keyboard(chat_id, text, buttons)
    if data == 'show_team':
        if len(my_team) == 0:
            text = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –¥–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ.'
        else:
            text = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            for i in range(len(my_team)):
                show_member_id = 'member_' + str(i + 1)
                text += f"*–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ {i + 1}\n*" \
                        f"üî∏@username: {my_team[show_member_id]['username']}\n" \
                        f"üî∏–ò–º—è: {my_team[show_member_id]['firstname']}\n" \
                        f"üî∏–§–∞–º–∏–ª–∏—è: {my_team[show_member_id]['lastname']}\n" \
                        f"üî∏–†–æ–ª—å: {my_team[show_member_id]['role']}\n"
        buttons = [
            {'text': "–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
        ]
        edit_message_with_inline_keyboard(chat_id, message_id, text, buttons)
    if data == 'team':
        buttons = [
            {'text': 'üöª–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'callback_data': 'show_team'},
            {'text': 'üÜï–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', 'callback_data': 'add_member'},
            {'text': 'üîÑ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', 'callback_data': 'edit_member'},
            {'text': '‚§µÔ∏è–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', 'callback_data': 'delete_member'},
            {'text': 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 'callback_data': 'menu'}
        ]
        edit_message_with_inline_keyboard(chat_id, message_id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã.', buttons)

    if data == 'edit_member':
        if len(my_team) != 0:
            text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n'
            for i in range(len(my_team)):
                show_member_id = 'member_' + str(i + 1)
                text += f"–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ {i + 1}\n" \
                        f"üî∏@username: {my_team[show_member_id]['username']}\n" \
                        f"üî∏–ò–º—è: {my_team[show_member_id]['firstname']}\n" \
                        f"üî∏–§–∞–º–∏–ª–∏—è: {my_team[show_member_id]['lastname']}\n" \
                        f"üî∏–†–æ–ª—å: {my_team[show_member_id]['role']}\n"
            bot.send_message(chat_id, text=text)
            markup = types.InlineKeyboardMarkup()
            buttons = [types.InlineKeyboardButton(str(i), callback_data=f'edit_member_{i}') for i in
                       range(1, len(my_team) + 1)]
            markup.add(*buttons)
            bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                             reply_markup=markup)

    if data.startswith('show_member_tasks'):
        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(my_team['member_' + str(i)]['username'],
                                       callback_data=f'show_tasks_for_member_{i}') for
            i in
            range(1, len(my_team) + 1)]
        markup.add(*buttons)
        edit_message_text(chat_id, message_id, text='–í—ã–±–µ—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏',
                          reply_markup=markup)

    if data.startswith('show_tasks_for_member_'):
        member_id = 'member_'+data[-1]
        tasks = []
        buttons = []
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞. –ó–∞–¥–∞—á–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –∫ –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–º.'
        for task_id in all_tasks:
            if all_tasks[task_id]['responsible'] is not None:
                if my_team[member_id]['username'] in all_tasks[task_id]['responsible']:
                    tasks.append(task_id)
        for num_priority in range(1,6):
            for task_id in tasks:
                if num_priority == int(all_tasks[task_id]['priority']):
                    buttons.append({'text': all_tasks[task_id]['name'], 'callback_data': f'show_task_{task_id[-1]}_for_member_{member_id[-1]}'})
        edit_message_with_inline_keyboard(chat_id, message_id, text, buttons)

    if data.startswith('show_task_'):
        task_id = 'task_'+data[10]
        member_id = 'member_'+data[-1]
        text = f"_–ó–∞–¥–∞—á–∞ ‚Ññ {task_id[-1]}_\n" \
                f"–ù–∞–∑–≤–∞–Ω–∏–µ:{all_tasks[task_id]['name']}\n" \
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {all_tasks[task_id]['description']}\n" \
                f"–î–µ–¥–ª–∞–π–Ω: {all_tasks[task_id]['deadline']}\n" \
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {all_tasks[task_id]['priority']}\n"
        buttons = [
            {'text': 'üîô–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É', 'callback_data': f'show_tasks_for_member_{task_id[-1]}'},
            {'text': "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
        ]
        edit_message_with_inline_keyboard(chat_id, message_id, text, buttons)
        if data == 'gpt':
        buttons = [
            {'text': '–ù–∞–∑–∞–¥', 'callback_data': 'menu'}
        ]
        text = '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–≤–µ—Ç–∞ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
        send_message_with_inline_keyboard(chat_id, text, buttons)
        bot.register_next_step_handler(call.message, neuroask)

def neuroask(message):
    chat_id = message.chat.id
    url = "https://llm.api.cloud.yandex.net/llm/v1alpha/chat"
    data = {
        "model": "general",
        "generationOptions": {
            "partialResults": True,
            "temperature": 0.4,
            "maxTokens": 200
        },
        "messages": [
            {
                "role": "ai.languageModels.user",
                "text":message.text.strip()
                }
        ],
        "instructionText": "—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º —Ä–µ—à–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
    }
    headers = {"Authorization": f'Api-Key {"AQVNwWtHH04wz-RRaNbCS4DH1cMfJdp67NmvF4e0"}',
                }
    response = requests.post(url, headers=headers, data=json.dumps(data))
    if response.status_code == 200:
        first_ans = json.loads(response.text.split('}\n')[-2]+'}')
        bot.send_message(chat_id, first_ans['result']['message']['text'])
    else:
        buttons = [
            {'text': '–ù–∞–∑–∞–¥', 'callback_data': 'menu'}
        ]
        text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
        send_message_with_inline_keyboard(chat_id, text, buttons)


def show_menu(chat_id):
    buttons = [
        {'text': '‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', 'callback_data': 'add_task'},
        {'text': 'üìù–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞—á–∞–º', 'callback_data': 'assign_roles'},
        {'text': 'üîù–ú–æ—è –∫–æ–º–∞–Ω–¥–∞', 'callback_data': 'team'},
        {'text': '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É', 'callback_data': 'edit_task'},
        {'text': 'üìö–í–∞—à–∏ –∑–∞–¥–∞—á–∏', 'callback_data': 'all_tasks'},
        {'text': '–ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç', 'callback_data': 'gpt'}
    ]
    text = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏.'
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_director(message):
    chat_id = message.chat.id
    if chat_id in temp_data and temp_data[chat_id]["director_id"] is None:
        username = message.text.strip()
        if username.startswith("@"):
            temp_data[chat_id]["director_id"] = username
            buttons = [
                {'text': '‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', 'callback_data': 'add_task'}
            ]
            text = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É.'
            send_message_with_inline_keyboard(chat_id, text, buttons)

        else:
            bot.send_message(chat_id, '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π @username —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è*', parse_mode='Markdown')


def set_name(message):
    chat_id = message.chat.id
    if all_tasks[task_id]['name'] is None:
        all_tasks[task_id]['name'] = message.text.strip()
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
        bot.register_next_step_handler(message, set_description)


def edit_name(message):
    chat_id = message.chat.id
    all_tasks[task_id]['name'] = message.text.strip()
    if len(my_team) == 0:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'add_member'}
        ]
    else:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'menu'}
        ]
    text = f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏*–ù–∞–∑–≤–∞–Ω–∏–µ*: {all_tasks[task_id]['name']}\n" \
           f"üî∏*–û–ø–∏—Å–∞–Ω–∏–µ*: {all_tasks[task_id]['description']}\n" \
           f"üî∏*–î–µ–¥–ª–∞–π–Ω*: {all_tasks[task_id]['deadline']}\n" \
           f"üî∏*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*: {all_tasks[task_id]['priority']}\n" \
           "P.S. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_description(message):
    chat_id = message.chat.id
    if all_tasks[task_id]['description'] is None and all_tasks[task_id]['name'] is not None:
        all_tasks[task_id]['description'] = message.text.strip()
        bot.send_message(chat_id,
                         '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ date.month.year hours:minutes, –Ω–∞–ø—Ä–∏–º–µ—Ä 24.06.2023 18:00')
        bot.register_next_step_handler(message, set_deadline)


def edit_description(message):
    chat_id = message.chat.id
    all_tasks[task_id]['description'] = message.text.strip()
    if len(my_team) == 0:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'add_member'}
        ]
    else:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'menu'}
        ]
    text = f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏*–ù–∞–∑–≤–∞–Ω–∏–µ*: {all_tasks[task_id]['name']}\n" \
           f"üî∏*–û–ø–∏—Å–∞–Ω–∏–µ*: {all_tasks[task_id]['description']}\n" \
           f"üî∏*–î–µ–¥–ª–∞–π–Ω*: {all_tasks[task_id]['deadline']}\n" \
           f"üî∏*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*: {all_tasks[task_id]['priority']}\n" \
           "P.S. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_deadline(message):
    chat_id = message.chat.id
    if all_tasks[task_id]['deadline'] is None and all_tasks[task_id]['name'] is not None and all_tasks[task_id][
        'description'] is not None:
        all_tasks[task_id]['deadline'] = message.text.strip()
        buttons = [types.InlineKeyboardButton(str(i), callback_data=f'priority_{i}') for i in range(1, 6)]
        markup = types.InlineKeyboardMarkup()
        markup.add(*buttons)
        bot.send_message(chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏.', reply_markup=markup)


def edit_deadline(message):
    chat_id = message.chat.id
    all_tasks[task_id]['deadline'] = message.text.strip()
    if len(my_team) == 0:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'add_member'}
        ]
    else:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'menu'}
        ]
    text = f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏*–ù–∞–∑–≤–∞–Ω–∏–µ*: {all_tasks[task_id]['name']}\n" \
           f"üî∏*–û–ø–∏—Å–∞–Ω–∏–µ*: {all_tasks[task_id]['description']}\n" \
           f"üî∏*–î–µ–¥–ª–∞–π–Ω*: {all_tasks[task_id]['deadline']}\n" \
           f"üî∏*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*: {all_tasks[task_id]['priority']}\n" \
           "P.S. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_username(message):
    chat_id = message.chat.id
    if my_team[member_id]['username'] is None:
        my_team[member_id]['username'] = message.text.strip()
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        bot.register_next_step_handler(message, set_firstname)


def edit_username(message):
    chat_id = message.chat.id
    if len(my_team) == 0:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'add_member'}
        ]
    else:
        buttons = [
            {'text': 'üü¢–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'menu'}
        ]
    text = f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏*–ù–∞–∑–≤–∞–Ω–∏–µ*: {all_tasks[task_id]['name']}\n" \
           f"üî∏*–û–ø–∏—Å–∞–Ω–∏–µ*: {all_tasks[task_id]['description']}\n" \
           f"üî∏*–î–µ–¥–ª–∞–π–Ω*: {all_tasks[task_id]['deadline']}\n" \
           f"üî∏*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*: {all_tasks[task_id]['priority']}\n" \
           "P.S. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_firstname(message):
    chat_id = message.chat.id
    if my_team[member_id]['username'] is not None and my_team[member_id]['firstname'] is None:
        my_team[member_id]['firstname'] = message.text.strip()
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        bot.register_next_step_handler(message, set_lastname)


def edit_firstname(message):
    chat_id = message.chat.id
    my_team[member_id]['firstname'] = message.text.strip()
    buttons = [
        {'text': "–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
    ]
    text = f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏@username: {my_team[member_id]['username']}\n" \
           f"üî∏–ò–º—è: {my_team[member_id]['firstname']}\n" \
           f"üî∏–§–∞–º–∏–ª–∏—è: {my_team[member_id]['lastname']}\n" \
           f"üî∏–†–æ–ª—å: {my_team[member_id]['role']}\n" \
           "P.S. –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –∫–æ–º–∞–Ω–¥–∞'.\n"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_lastname(message):
    chat_id = message.chat.id
    if my_team[member_id]['username'] is not None and my_team[member_id]['firstname'] is not None and \
            my_team[member_id]['lastname'] is None:
        my_team[member_id]['lastname'] = message.text.strip()
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
        bot.register_next_step_handler(message, set_role)


def edit_lastname(message):
    chat_id = message.chat.id
    my_team[member_id]['lastname'] = message.text.strip()
    buttons = [
        {'text': "–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
    ]
    text = f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏@username: {my_team[member_id]['username']}\n" \
           f"üî∏–ò–º—è: {my_team[member_id]['firstname']}\n" \
           f"üî∏–§–∞–º–∏–ª–∏—è: {my_team[member_id]['lastname']}\n" \
           f"üî∏–†–æ–ª—å: {my_team[member_id]['role']}\n" \
           "P.S. –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –∫–æ–º–∞–Ω–¥–∞'.\n"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def set_role(message):
    chat_id = message.chat.id
    if my_team[member_id]['username'] is not None and my_team[member_id]['firstname'] is not None and \
            my_team[member_id]['lastname'] is not None and my_team[member_id]['role'] is None:
        my_team[member_id]['role'] = message.text.strip()
        buttons = [
            {'text': "–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
        ]
        text = f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
               f"üî∏@username: {my_team[member_id]['username']}\n" \
               f"üî∏–ò–º—è: {my_team[member_id]['firstname']}\n" \
               f"üî∏–§–∞–º–∏–ª–∏—è: {my_team[member_id]['lastname']}\n" \
               f"üî∏–†–æ–ª—å: {my_team[member_id]['role']}\n" \
               "P.S. –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –∫–æ–º–∞–Ω–¥–∞'.\n"
        send_message_with_inline_keyboard(chat_id, text, buttons)


def edit_role(message):
    chat_id = message.chat.id
    my_team[member_id]['role'] = message.text.strip()
    buttons = [
        {'text': "–í—Å—ë –≤–µ—Ä–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': 'menu'}
    ]
    text = f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n" \
           f"üî∏@username: {my_team[member_id]['username']}\n" \
           f"üî∏–ò–º—è: {my_team[member_id]['firstname']}\n" \
           f"üî∏–§–∞–º–∏–ª–∏—è: {my_team[member_id]['lastname']}\n" \
           f"üî∏–†–æ–ª—å: {my_team[member_id]['role']}\n" \
           "P.S. –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –∫–æ–º–∞–Ω–¥–∞'.\n"
    send_message_with_inline_keyboard(chat_id, text, buttons)


def show_all_tasks(chat_id, message_id):
    text = '*–í—Å–µ –∑–∞–¥–∞—á–∏:*\n'
    for i, task_id in enumerate(all_tasks.keys(), start=1):
        task_info = all_tasks[task_id]
        status = "_–í—ã–ø–æ–ª–Ω–µ–Ω–∞_" if task_info.get('completed', False) else "_–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞_"
        text += f"{i}. {task_info['name']} - {status}\n"
    buttons = [
        {'text': 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'return_menu'},
        {'text': '‚ùå–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', 'callback_data': 'uncompleted_tasks'},
        {'text': '‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', 'callback_data': 'completed_tasks'},
        {'text': '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏', 'callback_data': 'change_status'},
        {'text': '–ó–∞–¥–∞—á–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞', 'callback_data': 'show_member_tasks'}
    ]
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, parse_mode='Markdown', reply_markup=generate_inline_keyboard(buttons))


def edit_message_text(chat_id: int, message_id: Optional[int], text: str, reply_markup=None):
    if message_id:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=reply_markup)
    else:
        bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)


def generate_inline_keyboard(buttons):
    markup = types.InlineKeyboardMarkup()
    for button in buttons:
        markup.add(types.InlineKeyboardButton(text=button['text'], callback_data=button['callback_data']))
    return markup


def show_back_button(chat_id, message_id, callback_data):
    buttons = [
        {'text': '–ù–∞–∑–∞–¥', 'callback_data': callback_data}
    ]
    edit_message_text(chat_id, message_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=generate_inline_keyboard(buttons))


def edit_message_with_inline_keyboard(chat_id, message_id, text, buttons):
    markup = generate_inline_keyboard(buttons)
    edit_message_text(chat_id, message_id, text, reply_markup=markup)


bot.polling(none_stop=True)
